/* You can add global styles to this file, and also import other style files */
@font-face {
  font-family: 'Ubuntu';
  src: url('./assets/fonts/Ubuntu-Regular.ttf') format('truetype');
}

html, body {
  height: 100%;
  background: #101414;
}
body {
  margin: 0;
  font-family: Ubuntu !important;
}

// Mixin for responsive containers (like Bootstrap's container)
@mixin make-container($gutter: 1.5rem) {
  width: 100%;
  padding-right: $gutter;
  padding-left: $gutter;
  margin-right: auto;
  margin-left: auto;

  @media (min-width: 576px) {
    max-width: 540px;
  }
  @media (min-width: 768px) {
    max-width: 720px;
  }
  @media (min-width: 992px) {
    max-width: 960px;
  }
  @media (min-width: 1200px) {
    max-width: 1140px;
  }
  @media (min-width: 1400px) {
    max-width: 1320px;
  }
}

// Basic container style
.container {
  @include make-container(); // Include the mixin
}

// Container fluid (full width)
.container-fluid {
  width: 100%;
  padding-right: 1.5rem; // Consistent gutter
  padding-left: 1.5rem;
  margin-right: auto;
  margin-left: auto;
}

// Example of a custom container size
.container-sm {
  @include make-container();
  max-width: 500px; // Example custom width
}

// Example of nesting containers (if needed)
.container-nested {
  @include make-container();

  .container { // Nested container
    @include make-container(.5rem); // Smaller gutter for nested
  }
}


// Responsive modifiers (Optional - if you need to control padding at breakpoints)
.px-sm-0 { // Remove horizontal padding on small screens
  @media (min-width: 576px) {
    padding-right: 0;
    padding-left: 0;
  }
}

// Example usage in HTML:
/*
<div class="container">
  <div class="row">
    <div class="col-md-6">...</div>
    <div class="col-md-6">...</div>
  </div>
</div>

<div class="container-fluid">...</div>

<div class="container-sm">...</div>
*/

// Margin and Padding Utilities

// Loop for margin and padding values from 0 to 20 (inclusive)
@for $i from 0 through 20 {
  .m-#{$i} { margin: #{$i}px !important; } // Margin all sides
  .mt-#{$i} { margin-top: #{$i}px !important; } // Margin top
  .mb-#{$i} { margin-bottom: #{$i}px !important; } // Margin bottom
  .ml-#{$i} { margin-left: #{$i}px !important; } // Margin left
  .mr-#{$i} { margin-right: #{$i}px !important; } // Margin right

  .p-#{$i} { padding: #{$i}px !important; } // Padding all sides
  .pt-#{$i} { padding-top: #{$i}px !important; } // Padding top
  .pb-#{$i} { padding-bottom: #{$i}px !important; } // Padding bottom
  .pl-#{$i} { padding-left: #{$i}px !important; } // Padding left
  .pr-#{$i} { padding-right: #{$i}px !important; } // Padding right

  // Responsive margin and padding (example for small screens)
  .m-sm-#{$i} {
    @media (min-width: 576px) { // Adjust breakpoint as needed
      margin: #{$i}px !important;
    }
  }
  .mt-sm-#{$i} {
    @media (min-width: 576px) {
      margin-top: #{$i}px !important;
    }
  }
  // ... (add other responsive variations: mb-sm, ml-sm, mr-sm, p-sm, pt-sm, etc.)
}

// Some additional margin/padding utilities (if needed)
.my-auto { margin-top: auto !important; margin-bottom: auto !important; }
.mx-auto { margin-left: auto !important; margin-right: auto !important; }
.my-0 { margin-top: 0 !important; margin-bottom: 0 !important; }
.mx-0 { margin-left: 0 !important; margin-right: 0 !important; }

// ... (Rest of your SCSS code).


.d-block{
  display: block;
}

// Flexbox Utilities

// Flex Direction
.d-flex { display: flex !important; }
.flex-row { flex-direction: row !important; }
.flex-column { flex-direction: column !important; }
.flex-row-reverse { flex-direction: row-reverse !important; }
.flex-column-reverse { flex-direction: column-reverse !important; }

// Justify Content
.justify-content-start { justify-content: flex-start !important; }
.justify-content-end { justify-content: flex-end !important; }
.justify-content-center { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around { justify-content: space-around !important; }
.justify-content-evenly { justify-content: space-evenly !important; }

// Align Items
.align-items-start { align-items: flex-start !important; }
.align-items-end { align-items: flex-end !important; }
.align-items-center { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch { align-items: stretch !important; }

// Align Self
.align-self-auto { align-self: auto !important; }
.align-self-start { align-self: flex-start !important; }
.align-self-end { align-self: flex-end !important; }
.align-self-center { align-self: center !important; }
.align-self-baseline { align-self: baseline !important; }
.align-self-stretch { align-self: stretch !important; }

// Flex Wrap
.flex-nowrap { flex-wrap: nowrap !important; }
.flex-wrap { flex-wrap: wrap !important; }
.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

// Flex Grow and Shrink
.flex-grow-0 { flex-grow: 0 !important; }
.flex-grow-1 { flex-grow: 1 !important; }
.flex-shrink-0 { flex-shrink: 0 !important; }
.flex-shrink-1 { flex-shrink: 1 !important; }

// Order
.order-0 { order: 0 !important; }
.order-1 { order: 1 !important; }
.order-2 { order: 2 !important; }
.order-3 { order: 3 !important; }
.order-4 { order: 4 !important; }
.order-5 { order: 5 !important; }
// ... add more order classes as needed

// Align Content (for multi-line flex containers)
.align-content-start { align-content: flex-start !important; }
.align-content-end { align-content: flex-end !important; }
.align-content-center { align-content: center !important; }
.align-content-between { align-content: space-between !important; }
.align-content-around { align-content: space-around !important; }
.align-content-stretch { align-content: stretch !important; }


// Responsive variations (example for small screens)
.d-sm-flex {
  @media (min-width: 576px) {
    display: flex !important;
  }
}

.flex-sm-row {
  @media (min-width: 576px) {
    flex-direction: row !important;
  }
}

// ... add other responsive variations as needed (flex-sm-column, justify-content-sm-*, align-items-sm-*, etc.)

.bg-color-white{
  background: white !important;
}
.bg-color-dark{
  background: #324b4b !important;
}
.text-color-white{
  color: white !important;
}
.text-color-dark{
  color: #324b4b !important;
}
.text-color-warning{
  color: rgb(239 169 161) !important;
  .highlight{
    padding: 2px 4px;
    background: #324b4b;
    border-radius: 3px;
    color: white;
    transition: 0.3s;
  }
}
.shift-key-hint{
  border-radius: 3px;
  padding: 2px 4px;
  transition: 0.3s;
}
.favorite-icon {
  animation: heartbeat 1.5s infinite;
  transition: animation-duration 0.3s ease;
  position: relative;
  top: 3px;

  &:hover {
    animation-duration: 0.5s; /* Faster heartbeat on hover */
  }
}

@keyframes heartbeat {
  0% {
    transform: scale(1); /* Initial scale */
  }
  20% {
    transform: scale(1.2); /* Scale up slightly */
  }
  40% {
    transform: scale(1); /* Back to original scale */
  }
  60% {
    transform: scale(1.05); /* Scale up a little */
  }
  80% {
    transform: scale(1); /* Back to original scale */
  }
  100% {
    transform: scale(1); /* Final scale */
  }
}

.algo-card{
  border: 2px solid #222222;
  border-radius: 5px;
  padding: 10px;
}

.algorithm-name{
  padding: 2px 7px;
  border-radius: 3px;
  background: #222222;
  transition: 0.3s;
  display: inline-block;
  color: #dcdcdc;

  &.short-long-paths{
    margin-right: auto;
  }

  &:hover{
    color: #ffffff;
    transition: 0.3s;
    cursor: pointer;
    background: #323232;
  }
}
